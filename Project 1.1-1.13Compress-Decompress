# Compress a genetic sequence (comprising of A,C,G,T) into binary
# then decompress it

class CompressedGene:
    def __init__(self, gene: str) -> None:
        self._compress(gene)
    
    def _compress(self, gene: str) -> None:
        self.bit_string: int = 1 #start with sentinel
        for letter in gene:
            print(letter)
            self.bit_string <<=2 #shift left two bits
            if letter == "A":
                self.bit_string |= 0b00
            elif letter == "C":
                self.bit_string |= 0b01
            elif letter == "G":
                self.bit_string |= 0b10
            elif letter == "T":
                self.bit_string |= 0b11
            else:
                print("Error, non-recognized nucleotide.")
        print(gene)
        print(self.bit_string)
        
    
    def decompress(self) -> str:
        gene: str = ""
        for twobits in range(0,self.bit_string.bit_length() - 1,2):
            print(twobits)
            bits: int = self.bit_string >> twobits & 0b11
            if bits == 0b00:
                gene+="A"
            if bits == 0b01:
                gene+="C"
            if bits == 0b10:
                gene+="G"
            if bits == 0b11:
                gene+="T"
            else:
                print("Error: unrecognized bit"+bits)
            print(gene[::-1])
            return gene[::-1]
    
    def __str__(self) -> str:
        return self.decompress()
