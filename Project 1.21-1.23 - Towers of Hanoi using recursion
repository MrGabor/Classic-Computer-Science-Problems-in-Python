# Model the Towers of Hanoi
# use a stack for each of the towers
# use a list to the store and manipulate the data

from typing import TypeVar, Generic, List
T = TypeVar('T')

class Stack(Generic[T]):
    def __init__(self) -> None:
        self._container: List[T] = []

    def push(self,item: T) -> None:
        self._container.append(item)

    def pop(self) -> T:
        return self._container.pop()

    def __repr__(self) -> str:
        return repr(self._container)

# now we can define the three towers and start with 3 discs on Tower A
num_discs: int = 3
tower_a: Stack[int] = Stack()
tower_b: Stack[int] = Stack()
tower_c: Stack[int] = Stack()
for i in range(1,num_discs + 1):
    tower_a.push(i)

# Use recursion to move the discs from tower A to tower C.  print out intermediary steps to validate solution
def hanoi(begin: Stack[int], end: Stack[int], temp: Stack[int], n: int)-> None:
    print("A: ",tower_a)
    print("B: ",tower_b)
    print("C: ",tower_c)
    print("n is: ",n)
    print("--------------")
    if n == 1:
        end.push(begin.pop())
    else:
        hanoi(begin,temp,end,n-1)
        hanoi(begin,end,temp,1)
        hanoi(temp,end,begin,n-1)
        print("A: ",tower_a)
        print("B: ",tower_b)
        print("C: ",tower_c)
        print("n is: ",n)
